{"template":"__react_static_root__/src/pages/documentation","sharedHashesByProp":{},"data":{"className":"/writing","data":"# Writing\r\n\r\n<h2 class=\"title is-2 has-text-danger\">Injection Warning</h2>\r\n\r\nWhen opening a CSV in an external program, a formula in a field could be ran that contains a vulnerability. Read more here: [Comma Separated Vulnerabilities](https://www.contextis.com/blog/comma-separated-vulnerabilities). Due to this issue, if a field starts with characters `=`, `@`, `+`, or `-`, that field will be prepended with a `\\t`. If the field is quoted, the `\\t` will come after the `\"`.\r\n\r\n`=one` -> `\\t=one`\r\n\r\n`\"=one\"` -> `\"\\t=one\"`\r\n\r\nYou are able to turn this functionality off in configuration.\r\n\r\n```cs\r\ncsv.Configuration.SanitizeForInjection = false;\r\n```\r\n\r\nWhen writing, you can throw an enumerable of class objects, dynamic objects, anonymous type objects, or pretty much anything else, and it will get written.\r\n\r\n### Topics\r\n&nbsp; | &nbsp;\r\n- | -\r\n[Write Class Objects](/examples/writing/write-class-objects) | \r\n[Write Dynamic Objects](/examples/writing/write-dynamic-objects) | \r\n[Write Anonymous Type Objects](/examples/writing/write-anonymous-type-objects) | \r\n","toc":{"title":"Examples","path":"examples","children":[{"title":"Prerequisites","path":"examples/prerequisites","children":[{"title":"Using and Dispose","path":"examples/prerequisites/using-dispose"},{"title":"Reading and Writing Files","path":"examples/prerequisites/reading-writing-files"},{"title":"Streams","path":"examples/prerequisites/streams"}]},{"title":"Reading","path":"examples/reading","children":[{"title":"Get Class Records","path":"examples/reading/get-class-records"},{"title":"Get Dynamic Records","path":"examples/reading/get-dynamic-records"},{"title":"Get Anonymous Type Records","path":"examples/reading/get-anonymous-type-records"},{"title":"Enumerate Class Records","path":"examples/reading/enumerate-class-records"},{"title":"Reading by Hand","path":"examples/reading/reading-by-hand"},{"title":"Reading Multiple Data Sets","path":"examples/reading/reading-multiple-data-sets"},{"title":"Reading Multiple Record Types","path":"examples/reading/reading-multiple-record-types"}]},{"title":"Writing","path":"examples/writing","children":[{"title":"Write Class Objects","path":"examples/writing/write-class-objects"},{"title":"Write Dynamic Objects","path":"examples/writing/write-dynamic-objects"},{"title":"Write Anonymous Type Objects","path":"examples/writing/write-anonymous-type-objects"}]},{"title":"Configuration","path":"examples/configuration","children":[{"title":"Class Maps","path":"examples/configuration/class-maps","children":[{"title":"Mapping Properties","path":"examples/configuration/class-maps/mapping-properties"},{"title":"Mapping by Name","path":"examples/configuration/class-maps/mapping-by-name"},{"title":"Mapping by Alternate Names","path":"examples/configuration/class-maps/mapping-by-alternate-names"},{"title":"Mapping Duplicate Names","path":"examples/configuration/class-maps/mapping-duplicate-names"},{"title":"Mapping by Index","path":"examples/configuration/class-maps/mapping-by-index"},{"title":"Auto Mapping","path":"examples/configuration/class-maps/auto-mapping"},{"title":"Ignoring Properties","path":"examples/configuration/class-maps/ignoring-properties"},{"title":"Constant Value","path":"examples/configuration/class-maps/constant-value"},{"title":"Type Conversion","path":"examples/configuration/class-maps/type-conversion"},{"title":"Inline Type Conversion","path":"examples/configuration/class-maps/inline-type-conversion"},{"title":"Optional Maps","path":"examples/configuration/class-maps/optional-maps"},{"title":"Validation","path":"examples/configuration/class-maps/validation"}]},{"title":"Attributes","path":"examples/configuration/attributes"}]},{"title":"Type Conversion","path":"examples/type-conversion"},{"title":"DataTable","path":"examples/data-table"}]}},"path":"examples/writing"}
